<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC</title>
      <link href="/archives/8fe47ff4.html"/>
      <url>/archives/8fe47ff4.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="简介快速入门"><a href="#简介快速入门" class="headerlink" title="简介快速入门"></a>简介快速入门</h2><h3 id="简单创建一个jdbc-Java、"><a href="#简单创建一个jdbc-Java、" class="headerlink" title="简单创建一个jdbc-Java、"></a>简单创建一个jdbc-Java、</h3><ul><li><p>创建工程导入jar包</p><ul><li>把jar包拖入src 的同名文件夹 然后右键加入库</li></ul></li><li><p>注册驱动</p><ul><li><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></li></ul></li><li><p>获取连接</p><ul><li><code>Connection conn = DriverManager.getConnection(url, username, password); //alt 加回车</code></li></ul></li><li><p>定义sql语句</p><p><code>String sql = &quot;update employees set salary =20000 where employee_id =100&quot;;</code></p></li><li><p>获取sql对象</p><p><code>Statement stmt = conn.createStatement();</code></p></li><li><p>执行sql</p><ul><li><code>int count = stmt.executeUpdate(sql);</code></li></ul></li><li><p>处理返回结果</p><ul><li><code>System.out.println(count);</code></li></ul></li><li><p>释放资源</p><p><code>stmt.close();</code><br><code>conn.close();</code></p></li></ul><p>JDBC API详解</p><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>DriverManager（驱动管理类）作用：</p><ul><li><p>注册驱动</p><p>registerDriver方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p><p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p><p>我们查询MySQL提供的Driver类</p><p>使用了ctrl+左键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​        在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行。而 </p><p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 就可以加载 <code>Driver</code> 类。</p><blockquote><p>&#x3D;&#x3D;提示：&#x3D;&#x3D;</p><ul><li>MySQL 5之后的驱动包，可以省略注册驱动的步骤</li><li>自动加载jar包中META-INF&#x2F;services&#x2F;java.sql.Driver文件中的驱动类</li></ul></blockquote><p>获取数据库连接</p><p>getConnection(String url, String user, String password) 尝试建立与给定数据库URL的连接。</p><p>参数说明：</p><ul><li><p>url ： 连接路径</p><blockquote><p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2…</p><p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p><p>&#x3D;&#x3D;细节：&#x3D;&#x3D;</p><ul><li><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</p></li><li><p>配置 useSSL&#x3D;false 参数，禁用安全连接方式，解决警告提示</p></li></ul></blockquote></li><li><p>user ：用户名</p></li><li><p>poassword ：密码</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/archives/8fe47ff4.html"/>
      <url>/archives/8fe47ff4.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>数据库定义语言（DDL Data Definition Language）：创建 删除和修改数据库和数据表的结构 </p><ul><li>CREATE DROP ALTER<br>数据操纵语言（DML Data Manipulation Language）:添加、删除、更新、和查询<br>－ INSERT、DELETE、UPDATE、SELECT</li><li>数据库控制语言（Data Control Language）:<br>－ GRANT、REVOKE、COMMIT、ROLLBACK、SAVEPOINT</li></ul><h2 id="SQL非过程化定义："><a href="#SQL非过程化定义：" class="headerlink" title="SQL非过程化定义："></a>SQL非过程化定义：</h2><ul><li>SQL“<strong>非过程化</strong>”指的是在使用其进行数据操作中，SQL的操作<strong>过程</strong>由DBMS自动完成，用户只需提出“做什么”，而不必知道“怎么做”，无需了解存取路径等。 所以称其为<strong>非过程化</strong>语言。</li><li>MYSQL：大小写Win和Liunx小知识<br>－ W: 大小写不敏感<br>－ L：敏感</li></ul><h2 id="基本的语句："><a href="#基本的语句：" class="headerlink" title="基本的语句："></a>基本的语句：</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><p>查询<br>- - SELECT FROM …<br>- - FROM …</p></li><li><p>去除重复行 <em>DISTINCT</em><br>  - - SELECT DISTINCT department_id<br>  - - from employees ;</p></li><li><p>列的别名 <em>AS</em><br>- - SELECT last_name AS name,commission_pct comm<br>- - FROM employees;<br>- - SELECT last_name “Name”,salary*12 “Annual Salary”<br>- - FROM employees;</p></li><li><p>过滤数据<br>- - SELECT …<br>- - FROM …<br>- - WHERE …</p></li></ul><h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="加减乘除取余和比较运算符"><a href="#加减乘除取余和比较运算符" class="headerlink" title="加减乘除取余和比较运算符"></a>加减乘除取余和比较运算符</h3><h3 id="安全等于运算符"><a href="#安全等于运算符" class="headerlink" title="安全等于运算符"></a>安全等于运算符</h3><ul><li>&lt;&#x3D;&gt;与＝的作用是相似的：区别就是&lt;&#x3D;&gt;可以对NULL＝NULL返回1，其中一个为NULL，返回0；</li></ul><h3 id="空运算符或者非空运算符"><a href="#空运算符或者非空运算符" class="headerlink" title="空运算符或者非空运算符"></a>空运算符或者非空运算符</h3><ul><li>IS NULL 或者 ISNULL </li><li>IS NOT NULL</li></ul><h3 id="最小值和最大值运算符"><a href="#最小值和最大值运算符" class="headerlink" title="最小值和最大值运算符"></a>最小值和最大值运算符</h3><ul><li>LEAST(value1,value2,value3)</li><li>GREATEST(value1,value2,value3)</li></ul><h3 id="BETWEEN-AND和IN以及NOT-IN运算符"><a href="#BETWEEN-AND和IN以及NOT-IN运算符" class="headerlink" title="BETWEEN AND和IN以及NOT IN运算符"></a>BETWEEN AND和IN以及NOT IN运算符</h3><p><code>SELECT ..</code></p><p><code>FROM ...</code></p><p><code>WHERE ... BETWEEN 2500 AND 3500</code>;</p><hr><p><code>SELECT ...</code><br><code>FROM ...</code><br><code>WHERE ... IN(value1,value2,value3);  // NOT IN</code></p><h3 id="LIKE运算符"><a href="#LIKE运算符" class="headerlink" title="LIKE运算符"></a>LIKE运算符</h3><ul><li><p>主要来匹配字符串</p></li><li><p>“%”:匹配0个或者多个字符</p></li><li><p>“_”:匹配单个字符</p></li></ul><p>SELECT first_name<br>FROM employees<br>WHERE first_name LIKE ‘S%’;</p><p>SELECT first_name<br>FROM employees<br>WHERE first_name LIKE ‘_o%’;</p>]]></content>
      
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题简单题的趣味解法分享</title>
      <link href="/archives/a581e6c5.html"/>
      <url>/archives/a581e6c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单题算法"><a href="#简单题算法" class="headerlink" title="简单题算法"></a>简单题算法</h1><h2 id="链表（单项）"><a href="#链表（单项）" class="headerlink" title="链表（单项）"></a>链表（单项）</h2><h3 id="题目一：删除中间节点"><a href="#题目一：删除中间节点" class="headerlink" title="题目一：删除中间节点"></a>题目一：删除中间节点</h3><p>若链表中的中的某个节点，既不是链表头节点，也不是链表尾结点，则称其为该链表的 [中间节点] 。</p><p>假定已知链表的某一个中间节点，请实现一种算法，将该节点从链表中删除</p><p>例如，传入节点 <code>c</code>（位于单向链表 <code>a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f</code> 中），将其删除后，剩余链表为 <code>a-&gt;b-&gt;d-&gt;e-&gt;f</code></p><ul><li><p>思路：利用替换将当前值删除，然后再删除下一个节点，Java有自动回收的机制，失去连接后</p><p>自动回收</p><p>a–&gt;b–&gt;*–&gt;d–&gt;f   到 a–&gt;b–&gt;d（<strong>赋值</strong>）–&gt;d–&gt;f  最后a–&gt;b–&gt;d（<strong>赋值</strong>）–&gt;f </p></li><li><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    //这个node就是中间的某个结点</span><br><span class="line">    public void deleteNode(ListNode node) &#123;</span><br><span class="line">        node.val=node.next.val;</span><br><span class="line">        node.next=node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通解题思路：典型的“狸猫换太子”，把next节点覆盖到前一个节点，而不是删除，依次覆盖完后，删除最后一个多余节点</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.val = node.next.val;</span><br><span class="line">            <span class="keyword">if</span> (node.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.next = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="题目二-2的幂"><a href="#题目二-2的幂" class="headerlink" title="题目二:2的幂"></a>题目二:2的幂</h3><p>给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。</p><p>如果存在一个整数 x 使得 n &#x3D;&#x3D; 2x ，则认为 n 是 2 的幂次方</p><ul><li><p>思路：2的n次方的最高位为1，其余所有位为0；</p><p>​            n-1二进制最高位为0，其余所有位为1；</p><p>​            所以如果n&gt;0且n&amp; (n-1)&#x3D;&#x3D;0即可判断这个就是2的n次方啦</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> simple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kaifaceshi</title>
      <link href="/archives/7868f850.html"/>
      <url>/archives/7868f850.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>兰导生日快乐</title>
      <link href="/archives/a9c2178.html"/>
      <url>/archives/a9c2178.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo issue</title>
      <link href="/archives/e6268f25.html"/>
      <url>/archives/e6268f25.html</url>
      
        <content type="html"><![CDATA[<p>全局代理<br>git config –global http.proxy <a href="http://127.0.0.1:xxxx">http://127.0.0.1:xxxx</a><br>取消全局代理<br>git config –global –unset https.proxy</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new test</title>
      <link href="/archives/5710bdcf.html"/>
      <url>/archives/5710bdcf.html</url>
      
        <content type="html"><![CDATA[<p>butterfly配置网站<br><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E7%B7%A8%E8%BC%AF%E6%8C%89%E9%88%95">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E7%B7%A8%E8%BC%AF%E6%8C%89%E9%88%95</a><br>文章的markdown文档上,在Front-matter添加cover,并填上要显示的图片地址。<br>如果不配置cover,可以设置显示默认的cover.</p><p>如果不想在首页显示cover,可以设置为false</p><p>sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p><h1 id="有很多事情"><a href="#有很多事情" class="headerlink" title="有很多事情"></a>有很多事情</h1><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>default_cover:在butterfly配置文件夹里面可以更改样式</p><p>default_cover:</p><ul><li><a href="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</a></li><li><a href="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</a></li><li><a href="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</a></li></ul><h2 id="文章封面（2）"><a href="#文章封面（2）" class="headerlink" title="文章封面（2）"></a>文章封面（2）</h2><p>文章的markdown文档上,在Front-matter添加cover,并填上要显示的图片地址。<br>如果不配置cover,可以设置显示默认的cover.<br>就是文章标题那边写cover: 记得有一个空格</p><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p>由于Hexo 4.1开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置decode: true来显示中文网址。</p><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章Front-matter单独设置</p><p>copyright_author: xxxx<br>copyright_author_href: <a href="https://xxxxxx.com/">https://xxxxxx.com</a><br>copyright_url: <a href="https://xxxxxx.com/">https://xxxxxx.com</a><br>copyright_info: 此文章版权归xxxxx所有，如有转载，请註明来自原作者</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
